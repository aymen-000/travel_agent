"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./services/api-service.tsx":
/*!**********************************!*\
  !*** ./services/api-service.tsx ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiService: function() { return /* binding */ apiService; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n// Configure your FastAPI backend URL\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:8000\";\nconst apiClient = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: API_BASE_URL,\n    timeout: 30000,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    }\n});\nclass ApiService {\n    async sendMessage(request) {\n        try {\n            let endpoint = \"\";\n            let requestData = {};\n            // Route to appropriate agent endpoint based on agent type\n            switch(request.agentType){\n                case \"team\":\n                    endpoint = \"/api/v1/team/search\";\n                    requestData = {\n                        query: request.message,\n                        thread_id: request.thread_id\n                    };\n                    break;\n                case \"flights\":\n                    endpoint = \"/api/v1/flights/search\";\n                    requestData = {\n                        query: request.message,\n                        //origin: request.travelPreferences.destination, // You might want to extract origin separately\n                        //destination: request.travelPreferences.destination,\n                        //departure_date: request.travelPreferences.departureDate,\n                        //return_date: request.travelPreferences.endDate,\n                        //passengers: request.travelPreferences.numGuests,\n                        thread_id: request.thread_id\n                    };\n                    break;\n                case \"hotels\":\n                    endpoint = \"/api/v1/hotels/search\";\n                    requestData = {\n                        query: request.message,\n                        //destination: request.travelPreferences.destination,\n                        //check_in: request.travelPreferences.departureDate,\n                        //check_out: request.travelPreferences.endDate,\n                        //guests: request.travelPreferences.numGuests,\n                        thread_id: request.thread_id\n                    };\n                    break;\n                default:\n                    throw new Error(\"Unknown agent type: \".concat(request.agentType));\n            }\n            const response = await apiClient.post(endpoint, requestData);\n            return {\n                message: response.data.response,\n                agentType: request.agentType,\n                sessionId: response.data.session_id,\n                timestamp: response.data.timestamp,\n                thread_id: response.data.thread_id,\n                metadata: response.data.metadata || {}\n            };\n        } catch (error) {\n            console.error(\"API Error:\", error);\n            if (axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].isAxiosError(error)) {\n                var _error_response_data, _error_response;\n                const errorMessage = ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.detail) || error.message;\n                throw new Error(\"Failed to send message to \".concat(request.agentType, \" agent: \").concat(errorMessage));\n            }\n            throw new Error(\"Failed to send message to \".concat(request.agentType, \" agent\"));\n        }\n    }\n    async getAgentStatus(agentType) {\n        try {\n            const response = await apiClient.get(\"/api/v1/\".concat(agentType, \"/status\"));\n            return response.data;\n        } catch (error) {\n            console.error(\"API Error:\", error);\n            return {\n                status: \"online\",\n                capabilities: [\n                    \"search\",\n                    \"recommend\",\n                    \"chat\"\n                ],\n                description: \"\".concat(agentType, \" agent is ready\")\n            };\n        }\n    }\n    // Search flights using your flights router\n    async searchFlights(params) {\n        try {\n            const response = await apiClient.post(\"/api/v1/flights/search\", {\n                query: params.query || \"Find flights from \".concat(params.origin, \" to \").concat(params.destination)\n            });\n            return response.data;\n        } catch (error) {\n            console.error(\"Flight search error:\", error);\n            throw new Error(\"Failed to search flights\");\n        }\n    }\n    // Search hotels using your hotels router\n    async searchHotels(params) {\n        try {\n            const response = await apiClient.post(\"/api/v1/hotels/search\", {\n                query: params.query || \"Find hotels in \".concat(params.destination),\n                //destination: params.destination,\n                check_in: params.checkIn,\n                check_out: params.checkOut,\n                guests: params.guests\n            });\n            return response.data;\n        } catch (error) {\n            console.error(\"Hotel search error:\", error);\n            throw new Error(\"Failed to search hotels\");\n        }\n    }\n    // Get destination information using your destinations router\n    async getDestinationInfo(destination) {\n        try {\n            const response = await apiClient.post(\"/api/v1/destinations/search\", {\n                query: \"Tell me about \".concat(destination),\n                destination: destination\n            });\n            return response.data;\n        } catch (error) {\n            console.error(\"Destination search error:\", error);\n            throw new Error(\"Failed to get destination information\");\n        }\n    }\n    // Get travel recommendations using team agent\n    async getTravelRecommendations(preferences) {\n        try {\n            const query = \"Plan a trip to \".concat(preferences.destination, \" for \").concat(preferences.numGuests, \" guests from \").concat(preferences.departureDate, \" to \").concat(preferences.endDate);\n            const response = await apiClient.post(\"/api/v1/team/search\", {\n                query: query,\n                travel_preferences: preferences\n            });\n            return response.data;\n        } catch (error) {\n            console.error(\"Recommendations error:\", error);\n            throw new Error(\"Failed to get travel recommendations\");\n        }\n    }\n    // Health check using your root endpoint\n    async healthCheck() {\n        try {\n            const response = await apiClient.get(\"/\");\n            return {\n                status: \"healthy\",\n                message: response.data.message || \"API is running\"\n            };\n        } catch (error) {\n            console.error(\"Health check failed:\", error);\n            return {\n                status: \"error\",\n                message: \"Backend unavailable\"\n            };\n        }\n    }\n}\nconst apiService = new ApiService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/api-service.tsx\n"));

/***/ })

});